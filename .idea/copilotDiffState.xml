<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/smartbiz-api/src/main/java/com/smartbiz/smartbiz_api/util/JwtUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/smartbiz-api/src/main/java/com/smartbiz/smartbiz_api/util/JwtUtil.java" />
              <option name="originalContent" value="package com.smartbiz.smartbiz_api.util;&#10;&#10;import io.jsonwebtoken.Claims;&#10;import io.jsonwebtoken.JwtException;&#10;import io.jsonwebtoken.Jwts;&#10;import io.jsonwebtoken.SignatureAlgorithm;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.security.Key;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtUtil {&#10;&#10;    private final Key key;&#10;    private final long expirationMillis;&#10;&#10;    public JwtUtil(&#10;            @Value(&quot;${jwt.secret}&quot;) String secret,&#10;            @Value(&quot;${jwt.expiration}&quot;) long expirationMillis) {&#10;&#10;        // Use the secret to create the signing key&#10;        this.key = Keys.hmacShaKeyFor(secret.getBytes());&#10;        this.expirationMillis = expirationMillis;&#10;    }&#10;&#10;    // Generate JWT token with subject (email) and role claim&#10;    public String generateToken(String subject, String role) {&#10;        Date now = new Date();&#10;        Date expiryDate = new Date(now.getTime() + expirationMillis);&#10;&#10;        return Jwts.builder()&#10;                .setSubject(subject)&#10;                .claim(&quot;role&quot;, role)&#10;                .setIssuedAt(now)&#10;                .setExpiration(expiryDate)&#10;                .signWith(key, SignatureAlgorithm.HS256)&#10;                .compact();&#10;    }&#10;&#10;    // Validate JWT token, return true if valid, false otherwise&#10;    public boolean validateJwtToken(String token) {&#10;        try {&#10;            Jwts.parserBuilder()&#10;                    .setSigningKey(key)&#10;                    .build()&#10;                    .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;));&#10;            return true;&#10;        } catch (JwtException | IllegalArgumentException e) {&#10;            // Token is invalid or expired&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Extract claims from token&#10;    public Claims getClaimsFromToken(String token) {&#10;        return Jwts.parserBuilder()&#10;                .setSigningKey(key)&#10;                .build()&#10;                .parseClaimsJws(token.replace(&quot;Bearer &quot;, &quot;&quot;))&#10;                .getBody();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.smartbiz.smartbiz_api.util;&#10;&#10;import io.jsonwebtoken.Claims;&#10;import io.jsonwebtoken.JwtException;&#10;import io.jsonwebtoken.Jwts;&#10;import io.jsonwebtoken.SignatureAlgorithm;&#10;import io.jsonwebtoken.security.Keys;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.security.Key;&#10;import java.util.Date;&#10;&#10;@Component&#10;public class JwtUtil {&#10;&#10;    private final Key key;&#10;    private final long expirationMillis;&#10;&#10;    public JwtUtil(&#10;            @Value(&quot;${jwt.secret}&quot;) String secret,&#10;            @Value(&quot;${jwt.expiration}&quot;) long expirationMillis) {&#10;&#10;        // Use the secret to create the signing key&#10;        this.key = Keys.hmacShaKeyFor(secret.getBytes());&#10;        this.expirationMillis = expirationMillis;&#10;    }&#10;&#10;    // Generate JWT token with subject (email) and role claim&#10;    public String generateToken(String subject, String role) {&#10;        Date now = new Date();&#10;        Date expiryDate = new Date(now.getTime() + expirationMillis);&#10;&#10;        return Jwts.builder()&#10;                .setSubject(subject)&#10;                .claim(&quot;role&quot;, role)&#10;                .setIssuedAt(now)&#10;                .setExpiration(expiryDate)&#10;                .signWith(key, SignatureAlgorithm.HS256)&#10;                .compact();&#10;    }&#10;&#10;    // Validate JWT token, return true if valid, false otherwise&#10;    public boolean validateJwtToken(String token) {&#10;        if (token == null || !token.startsWith(&quot;Bearer &quot;)) {&#10;            return false;&#10;        }&#10;        String rawToken = token.substring(7);&#10;        try {&#10;            Jwts.parser()&#10;                .setSigningKey(key)&#10;                .parseClaimsJws(rawToken);&#10;            return true;&#10;        } catch (JwtException | IllegalArgumentException e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Extract claims from token&#10;    public Claims getClaimsFromToken(String token) {&#10;        if (token == null || !token.startsWith(&quot;Bearer &quot;)) {&#10;            return null;&#10;        }&#10;        String rawToken = token.substring(7);&#10;        return Jwts.parser()&#10;                .setSigningKey(key)&#10;                .parseClaimsJws(rawToken)&#10;                .getBody();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
 </project>

